# By Sharon Campbell, Ken Simon, and Joe Beda for Heptio
# create and claim a persistent volume for our pod
# this works because we enabled cloud-provider=aws
# so it can create a disk for itself
# if you create a persistent volume another way
# name it "database" and make sure the cluster has access

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: task-pv-claim
spec:
  storageClassName: manual
  accessModes:											 
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi

---
# deploy the MySQL server container


        volumeMounts:
        - mountPath: /mnt/data
          # https://kubernetes.io/docs/concepts/storage/volumes/#using-subpath
          # the volume's data directory is mapped to /var/lib/mysql in the pod
         
          # refers to the volume named database
          name: task-pv-volume
      # our spec requires a volume
      volumes:
      # the name assigned here is referenced by the container in volumeMounts: name
      - name: task-pv-volume
        persistentVolumeClaim:
          # refers to the PersistentVolumeClaim named database
          # this expects a PersistentVolumeClaim volume to exist already
          # with correct permissions for this cluster
          claimName: task-pv-claim

---
# expose a pod on mysql.default.svc.cluster.local to the rest of the cluster
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: mysql-server
  labels:
    app: mysql-server
spec:
  template:
    metadata:
      labels:
        app: mysql-server
    spec:
      containers:
      - name: mysql-server
        image: mysql:5.6
        env:
        - name: MYSQL_DATABASE
          value: demo
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password.txt
        ports:
        - containerPort: 3306
apiVersion: v1
# https://kubernetes.io/docs/concepts/services-networking/service/
kind: Service
metadata:
  # the name mysql here means you can reference the pod
  # using the host mysql.default.svc.cluster.local from within the cluster
  name: mysql
  labels:
    "heptio.com/example": lamp
spec:
  # allows us to set our own internal IP to reference this pod
  # in this case we care about the port
  # https://kubernetes.io/docs/concepts/services-networking/service/#choosing-your-own-ip-address
  type: ClusterIP
  ports:
  # make the service available on this port within the cluster
  - port: 3306
    protocol: TCP
  # apply this service to the pod with the label app: mysql
  selector:
    app: mysql
